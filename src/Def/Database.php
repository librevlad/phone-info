<?php


namespace Librevlad\PhoneInfo\Def;

use Illuminate\Support\Arr;

class Database {

    /**
     * @var \Illuminate\Support\Collection
     */
    protected $def;

    /**
     * Объект одиночки храниться в статичном поле класса. Это поле — массив, так
     * как мы позволим нашему Одиночке иметь подклассы. Все элементы этого
     * массива будут экземплярами кокретных подклассов Одиночки. Не волнуйтесь,
     * мы вот-вот познакомимся с тем, как это работает.
     */
    private static $instances = [];

    /**
     * Одиночки не должны быть клонируемыми.
     */
    protected function __clone() {
    }

    /**
     * Одиночки не должны быть восстанавливаемыми из строк.
     */
    public function __wakeup() {
        throw new \Exception( "Cannot unserialize a singleton." );
    }

    /**
     * Это статический метод, управляющий доступом к экземпляру одиночки. При
     * первом запуске, он создаёт экземпляр одиночки и помещает его в
     * статическое поле. При последующих запусках, он возвращает клиенту объект,
     * хранящийся в статическом поле.
     *
     * Эта реализация позволяет вам расширять класс Одиночки, сохраняя повсюду
     * только один экземпляр каждого подкласса.
     */
    public static function getInstance() {
        $cls = static::class;
        if ( ! isset( self::$instances[ $cls ] ) ) {
            self::$instances[ $cls ] = new static();
        }

        return self::$instances[ $cls ];
    }

    protected function __construct( $file = 'DEF-9xx' ) {

        if ( ( $file == 'DEF-9xx' ) || ( $file == 'ABC-4xx' ) ) {
            $separator = ',';
        }

        if ( ( $file == 'ABC-3xx' ) || ( $file == 'ABC-8xx' ) ) {
            $separator = ';';
        }


        $def = floadcsv( ( dirname( __FILE__ ) . '/../../data/def/' . $file . '.csv' ), [
            'code',
            'start',
            'stop',
            'count',
            'operator',
            'region',
        ], $separator );

        $regionMap = [
            'Архангельская область * Ненецкий автономный округ'                      => 'Ненецкий АО',
            'Архангельская область и Ненецкий автономный округ'                      => 'Ненецкий АО',
            'Московская область * Москва|Московская область * Москва'                => 'Московская Область',
            'г. Москва * Московская область'                                         => 'Московская Область',
            'г. Москва и Московская область'                                         => 'Московская Область',
            'Московская область'                                                     => 'Московская Область',
            'г. Санкт-Петербург * Ленинградская область'                             => 'Ленинградская область',
            'г. Санкт-Петербург и Ленинградская область'                             => 'Ленинградская область',
            'г. Санкт - Петербург и Ленинградская область'                           => 'Ленинградская область',
            'Корякский округ|Камчатский край'                                        => 'Камчатский край',
            'Чувашская Республика - Чувашия'                                         => 'Чувашская Республика',
            'г. Москва'                                                              => 'Московская Область',
            'Республика Саха /Якутия/'                                               => 'Якутия',
            'г. Сочи|Краснодарский край'                                             => 'Краснодарский край',
            'Республика Кабардино-Балкарская'                                        => 'Кабардино-Балкарская Республика',
            'Республика Карачаево-Черкесская'                                        => 'Карачаево-Черкесская Республика',
            'Республика Крым и г. Севастополь'                                       => 'Республика Крым',
            'Республика Крым * г. Севастополь'                                       => 'Республика Крым',
            'г. Севастополь'                                                         => 'Республика Крым',
            'р-ны Абзелиловский и Белорецкий|р-ны Абзелиловский и Белорецкий'        => 'Республика Башкортостан',
            'р-ны Абзелиловский и Белорецкий|Абзелиловский район * Белорецкий район' => 'Республика Башкортостан',
            'Чувашская Республика - Чувашия'                                         => 'Чувашская Республика',
            'Республика Чеченская'                                                   => 'Чеченская Республика',
            'Республика Удмуртская'                                                  => 'Удмуртская Республика',
            'Сургутский район и г. Сургут'                                           => 'Ханты - Мансийский - Югра АО',
            'Ханты-Мансийский АО - Югра'                                             => 'Ханты - Мансийский - Югра АО',
            'Сургутский район * г. Сургут'                                           => 'Ханты - Мансийский - Югра АО',
            'г. Норильск|Красноярский край'                                          => 'Красноярский край',
            'г. Владимир|Владимирская обл.'                                          => 'Владимирская обл.',
            'г. Кострома|р-н Костромской|Костромская обл.'                           => 'Костромская обл.',
            'г. Псков|Псковская обл.'                                                => 'Псковская обл.',
        ];

        $this->def = collect( $def )->map( function ( $v ) use ( $regionMap ) {
            $v[ 'region' ] = Arr::get( $regionMap, $v[ 'region' ], $v[ 'region' ] );
            $v[ 'region' ] = trim( str_replace( 'обл.', 'область', $v[ 'region' ] ) );

            return $v;
        } );

        $this->def = collect( $def )->groupBy( 'code' );

    }

    public function def() {
        return $this->def;
    }

    public function operators() {
        return $this->def->pluck( 'operator' )->unique()->values();
    }

    public function regions() {
        $ar = $this->def->pluck( 'region' )->unique()->values()->toArray();
        sort( $ar );

        return collect( $ar );
    }

    public function operatorByPhoneNumber( $phone ) {
        return Arr::get( $this->findByPhoneNumber( $phone ), 'operator' );
    }

    public function regionByPhoneNumber( $phone ) {
        return Arr::get( $this->findByPhoneNumber( $phone ), 'region' );
    }

    public function findByPhoneNumber( $phone ) {

        $code = substr( $phone, 1, 3 );
        $rest = substr( $phone, 4 );

        //        dd( $this->def->where( 'code', $code ));
        //        return $this->def->where( 'code', $code )->first();
        //        dump( $this->def[$code]);
        $chunk = $this->def[ $code ] ?? null;
        if ( ! $chunk ) {
            return null;
        }

        return collect( $chunk )->where( 'start', '<', $rest )->last();

    }

}
